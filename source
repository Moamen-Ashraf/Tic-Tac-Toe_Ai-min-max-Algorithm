board = [" "] * 9

def is_Win(player):
    for i in range(3):
        if board[i*3] == board[i*3 + 1] == board[i*3 + 2] == player:
            return True   
    for i in range(3):
        if board[i] == board[i+3] == board[i+6] == player:
            return True   
    if board[0] == board[4] == board[8] == player or board[2] == board[4] == board[6] == player:
        return True   
    return False

def display_board():
    print('-'*13)
    for i in range(3):
        print("|", board[i*3], "|", board[i*3 + 1], "|", board[i*3 + 2], "|")
        print('-'*13)

from IPython.display import clear_output

def Play_XO():
    player = 'X'

    while True:
        display_board()

        if player == 'X':
            while True:
                position = int(input("Player " + player + ", enter the position (1-9): "))
                if position < 1 or position > 9:
                    print('\nInvalid position, please enter a position between 1 and 9\n')
                    continue
                elif board[position - 1] != ' ':
                    print(f'\nInvalid position, cell is occupied by {board[position - 1]}\n')
                else:
                    break

            board[position - 1] = player

            if is_Win(player):
                display_board()
                print("Player " + player + " Wins!")
                break
            elif ' ' not in board: 
                print("It's a Tie!")
                break
        else:
            min_max(board)

            if is_Win('O'):
                display_board()
                print("Computer Wins!")
                break
            elif ' ' not in board: 
                print("It's a Tie!")
                break

        player = 'O' if player == 'X' else 'X'
        clear_output(wait=True)

def minimax(board, depth, isMaximizing):
    if is_Win('X'):
        return -1
    elif is_Win('O'): 
        return 1
    elif ' ' not in board:
        return 0

    if isMaximizing:
        best_score = float('-inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                score = minimax(board, depth + 1, False)
                board[i] = ' '
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                score = minimax(board, depth + 1, True)
                board[i] = ' '
                best_score = min(score, best_score)
        return best_score

def min_max(board):
    final_score = float('-inf')
    final_i = None

    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            score = minimax(board, 0, False)
            board[i] = ' '

            if score > final_score:
                final_score = score
                final_i = i

    board[final_i] = 'O'

Play_XO()
